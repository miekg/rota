// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Package rotang handles the scheduling of oncall rotations.
package rotang

import (
	"strings"
	"time"
)

// Rota represents a named rotation and it's shift entries.
type Rota struct {
	// Name of the Rota, should match a Configuration.
	Name string
	// Entries contain the shift entries for this rota.
	Entries []*ShiftEntry
}

// Configuration represents a rota configuration.
type Configuration struct {
	Config  Config
	Members []ShiftMember
}

// Config contains the rota configuration.
type Config struct {
	Name             string
	Description      string
	Owners           []string
	Email            Email
	ShiftsToSchedule int
	Shifts           ShiftConfig
	Expiration       int
	Enabled          bool
}

// ShiftConfig holds the Shift configuration.
type ShiftConfig struct {
	// StartTime represents the start-time of the first shift.
	// Only the Time of day is considered.
	// Defaults to 00:00 PDT.
	StartTime time.Time
	// Length sets the number of days a shift lasts.
	Length int
	// Skip defines a number of days with no oncalls.
	Skip int
	// Shifts represents the shifts over a 24hour period.
	Shifts []Shift
	// ShiftMembers specifides number of members per shift.
	ShiftMembers int
	// Generator used to schedule new shifts.
	Generator string
	// Modifiers is used to modify shifts produced by the Generator.
	Modifiers []string
	// TZ TimeZone used.
	TZ time.Location
	// FullDayEvents creates FullDayEvents in the rotation calendar.
	FullDayEvents bool
}

// Shift represents a shift in a 24h rotation.
type Shift struct {
	// Name of the shift - Eg. "MTV Shift"
	Name string
	// Duration is the duration of the shift.
	Duration time.Duration
}

// ShiftEntry represents one scheduled shift.
type ShiftEntry struct {
	// Name of the Shift this entry belongs to.
	Name string
	// OnCall are the members on-call for this shift.
	OnCall    []ShiftMember
	StartTime time.Time
	EndTime   time.Time
	// Comment is an optional comment where the rota algo
	// can add some extra information.
	Comment string
}

func (s ShiftEntry) String() string {
	b := ""
	b += s.Name + ":\n"
	xm := []string{}
	for i := range s.OnCall {
		xm = append(xm, s.OnCall[i].String())
	}
	b += "\t" + strings.Join(xm, ",") + "\n"
	b += "\t" + s.StartTime.String() + " - " + s.EndTime.String() + "\n"
	if s.Comment != "" {
		b += "\t" + s.Comment + "\n"
	}

	return b
}

// Email contains the Subject and Body templates for email generated by the rota.
type Email struct {
	// Subject is a string used as a template run against the Member structure to generate the e-mail Subject
	//  text.
	Subject string
	// Body is a string used as a template run againste the Member structure to generate the e-mail Body.
	Body string
	// DaysBeforeWarn sets the number of days before an on-call shift the notification e-mail is sent.
	DaysBeforeNotify int
	// Enabled enables/disables sending notification emails.
	Enabled bool
}

// ShiftMember holds the information needed for a member of a shift.
type ShiftMember struct {
	Email     string
	ShiftName string
}

func (s ShiftMember) String() string {
	return s.Email
}

// Member represents one member of a rotation.
type Member struct {
	Name        string `json:"full_name"`
	Email       string `json:"email_address"`
	TZ          time.Location
	OOO         []OOO
	Preferences []Preference
}

// OOO contains one Out-of-Office event.
type OOO struct {
	Start    time.Time
	Duration time.Duration
	Comment  string
}

// Preference is used for Members to signal shift preferences.
type Preference int

// Possible preferences for a Member.
const (
	NoPreferences Preference = iota
	NoWeekends
	NoMonday
	NoTuesday
	NoWednesday
	NoThursday
	NoFriday
	NoSaturday
	NoSunday
	NoOncall
)

// RotaGenerator is used to generate oncall rotations.
type RotaGenerator interface {
	Name() string
	Generate(sc *Configuration, start time.Time, previous []ShiftEntry, members []Member, shiftsToSchedule int) ([]ShiftEntry, error)
}

// ShiftModifier is used to modify shifts produced by the Generator.
type ShiftModifier interface {
	Name() string
	Description() string
	Modify(sc *ShiftConfig, shifts []ShiftEntry) ([]ShiftEntry, error)
}

// Info contains information used to fill in Email Subject/Body and Calendar descriptions.
type Info struct {
	RotaName    string
	ShiftConfig ShiftConfig
	ShiftEntry  ShiftEntry
	Member      Member
	MemberURL   string
}
